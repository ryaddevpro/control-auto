get all triggers of my database 
 
for client table here is the trigger name:
 -client_created_at_trigger
 -handle_updated_at

for paymenthistory table the trigger name:
 -after_insert_payment

 
SELECT tgname AS table_name,
       tgrelid::regclass AS table_name,
       pg_get_triggerdef(oid) AS trigger_definition
FROM pg_trigger;



**get single trigger
  SELECT pg_get_triggerdef(t.oid) AS trigger_definition
  FROM pg_trigger t
  JOIN pg_class c ON t.tgrelid = c.oid
  WHERE t.tgname = 'after_insert_payment';

i think this is the query that allow me to generate all tables
-- Supabase AI is experimental and may produce incorrect answers
-- Always verify the output before executing

create table
  public.client (
    client_id bigint primary key generated always as identity,
    nom character varying(100) null,
    prenom character varying(100) null,
    cin character varying(20) null,
    num_tel character varying(20) null,
    date_exam date null,
    prix_restant numeric(10, 2) null,
    prix_total numeric(10, 2) null,
    prix_paye numeric(10, 2) null,
    user_id text not null,
    updated_at timestamp with time zone null,
    created_at timestamp with time zone null,
    "isDeleted" boolean null default false,
    constraint client_pkey1 primary key (client_id),
    constraint client_user_id_fkey foreign key (user_id) references "user" (user_id)
  ) tablespace pg_default;

create table
  public.paymenthistory (
    payment_id bigint primary key generated always as identity,
    client_id integer not null,
    payment_date timestamp without time zone null default current_timestamp,
    amount numeric(10, 2) null,
    user_id character varying(255) null,
    constraint paymenthistory_pkey primary key (payment_id),
    constraint paymenthistory_client_id_fkey foreign key (client_id) references client (client_id),
    constraint paymenthistory_user_id_fkey foreign key (user_id) references "user" (user_id)
  ) tablespace pg_default;

create table
  public.user (
    id bigint primary key generated always as identity,
    user_id character varying(255) not null,
    email character varying(255) not null,
    constraint user_pkey primary key (id),
    constraint user_email_key unique (email),
    constraint user_user_id_key unique (user_id)
  ) tablespace pg_default;



create table
  gestion_financiere (
    id SERIAL primary key,
    user_id varchar not null references "user" (user_id),
    date DATE not null,
    entree decimal(10, 2),
    sortie decimal(10, 2) not null,
    description text,
    entreAvecDelete decimal(10, 2),
    created_at timestamp default current_timestamp,
    updated_at timestamp default current_timestamp
  );
 

 CREATE TABLE public.sortie (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    description TEXT,
    amount DECIMAL(10, 2) NOT NULL,
    date DATE NOT NULL DEFAULT CURRENT_DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_user
    FOREIGN KEY (user_id)
    REFERENCES public.user (user_id)
    ON DELETE CASCADE
);


CREATE OR REPLACE FUNCTION public.handle_client_soft_deletion()
  RETURNS trigger AS
$BODY$
DECLARE
  total_paid NUMERIC;
BEGIN
  -- Check if "isDeleted" is being set to true
  IF NEW."isDeleted" AND NOT OLD."isDeleted" THEN
    -- Calculate the total amount paid by the client
    SELECT COALESCE(SUM(amount), 0)
    INTO total_paid
    FROM paymenthistory
    WHERE client_id = OLD.client_id;

    -- Check if a row exists for today's date and the given user_id
    IF EXISTS (
      SELECT 1 FROM gestion_financiere
      WHERE user_id = OLD.user_id AND date = CURRENT_DATE
    ) THEN
      -- Update the existing row for today with the total payments made by the client being marked as deleted
      UPDATE gestion_financiere
      SET entreAvecDelete = total_paid
      WHERE user_id = OLD.user_id AND date = CURRENT_DATE;
    ELSE
      -- Insert a new row if no entry exists for today
      INSERT INTO gestion_financiere (user_id, date, entree, sortie, description, entreAvecDelete)
      VALUES (
        OLD.user_id,
        CURRENT_DATE,
        0,  -- No new entry since it's a soft deletion
        0,  -- No sortie for this operation
        'Total payments recorded upon client soft deletion',
        total_paid
      );
    END IF;
  END IF;

  RETURN NEW;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;
DROP TRIGGER IF EXISTS before_client_soft_deletion ON client;

CREATE TRIGGER before_client_soft_deletion
  BEFORE UPDATE OF "isDeleted" ON client
  FOR EACH ROW
  WHEN (NEW."isDeleted" IS TRUE)
  EXECUTE FUNCTION public.handle_client_soft_deletion();
